{"version":3,"sources":["task.js"],"names":["definition","Pledge","isInstanceOf","base","supportMethod","functionUniqueUuid","processQueue","task","thread","queue","length","supported","threads","idle","shift","busy","uuid","addEventListener","onMessage","onError","postMessage","load","toString","parameter","ArrayBuffer","setTimeout","deferred","resolve","apply","exception","reject","disposeTask","removeEventListener","push","Task","self","this","defer","pledge","worker","NativeWorker","NativeUrl","NativeBlob","source","i","prototype","event","data","type","result","createObjectURL","extend","provide"],"mappings":"CAqBC,WACA,YAEA,SAASA,GAAWC,EAAQC,EAAcC,EAAMC,EAAeC,GAU9D,QAASC,KACR,GAAIC,GAAMC,GAEPC,EAAMC,QAAYC,IAAaC,EAAQC,KAAKH,SAC9CH,EAAOE,EAAMK,QAEVH,GACFH,EAASI,EAAQC,KAAKC,QAEtBF,EAAQG,KAAKR,EAAKS,MAAQR,EAE1BA,EAAOS,iBAAiB,UAAWV,EAAKW,WACxCV,EAAOS,iBAAiB,QAASV,EAAKY,SACtCX,EAAOY,aAAcC,KAAMd,EAAKc,KAAKC,WAAYC,UAAWhB,EAAKgB,WAAarB,EAAaK,EAAKgB,UAAWC,cAAiBjB,EAAKgB,WAAc,OAE/IE,WAAW,WACV,IACClB,EAAKmB,SAASC,QAAQpB,EAAKc,KAAKO,MAAM,KAAMrB,EAAKgB,YAChD,MAAMM,GACPtB,EAAKmB,SAASI,SAGfxB,KACE,IAKN,QAASyB,GAAYxB,GACpB,GAAIC,GAASI,EAAQG,KAAKR,EAAKS,YAExBJ,GAAQG,KAAKR,EAAKS,MAEzBR,EAAOwB,oBAAoB,UAAWzB,EAAKW,WAC3CV,EAAOwB,oBAAoB,QAASzB,EAAKY,SACzCP,EAAQC,KAAKoB,KAAKzB,GAClBF,IAGD,QAAS4B,GAAKb,EAAME,GACnB,GAAIY,GAAWC,KACdV,EAAWzB,EAAOoC,OAUnB,OARAF,GAAKnB,KAAYX,IACjB8B,EAAKT,SAAYA,EACjBS,EAAKd,KAAYA,EACjBc,EAAKZ,UAAYA,MAEjBd,EAAMwB,KAAKE,GACX7B,IAEOoB,EAASY,OA5DjB,GAOCC,GAPGC,EAAepC,EAAc,UAChCqC,EAAerC,EAAc,OAC7BsC,EAAetC,EAAc,QAC7BO,EAAe6B,GAAgBC,GAAaC,EAC5CC,EAAe,4ZACf/B,GAAiBC,QAAUE,SAC3BN,KACQmC,EAAI,CAgFb,IAvBAV,EAAKW,WAOJ3B,UAAW,SAAS4B,GACnB,GAAIX,GAAOC,IAEY,YAApBU,EAAMC,KAAKC,OACbb,EAAKT,SAASC,QAAQmB,EAAMC,KAAKE,QACjClB,EAAYI,KAGdhB,QAAS,WACR,GAAIgB,GAAOC,IAEXD,GAAKT,SAASI,SACdC,EAAYI,KAIXxB,EACF,IAGC,IAFA4B,EAASE,EAAUS,gBAAgB,GAAIR,IAAaC,IAAYK,KAAM,4BAE5D,EAAJJ,EAAOA,IACZhC,EAAQC,KAAK+B,GAAK,GAAIJ,GAAaD,GAEnC,MAAMV,GACPlB,GAAY,EAId,MAAOR,GAAKgD,OAAOjB,GAGpBkB,SAAU,iBAAkB,iCAAkC,SAAU,mBAAoB,0BAA2BpD","file":"task.js","sourcesContent":["/**\n * Qoopido task\n *\n * Provides basic web worker abstraction\n *\n * Copyright (c) 2015 Dirk Lueth\n *\n * Dual licensed under the MIT and GPL licenses.\n *  - http://www.opensource.org/licenses/mit-license.php\n *  - http://www.gnu.org/copyleft/gpl.html\n *\n * @author Dirk Lueth <info@qoopido.com>\n *\n * @use /demand/pledge\n * @use /demand/validator/isInstanceOf\n *\n * @require ./base\n * @require ./support/method\n * @require ./function/unique/uuid\n */\n\n(function() {\n\t'use strict';\n\n\tfunction definition(Pledge, isInstanceOf, base, supportMethod, functionUniqueUuid) {\n\t\tvar NativeWorker = supportMethod('Worker'),\n\t\t\tNativeUrl    = supportMethod('URL'),\n\t\t\tNativeBlob   = supportMethod('Blob'),\n\t\t\tsupported    = NativeWorker && NativeUrl && NativeBlob,\n\t\t\tsource       = 'function d(a){return a.replace(c,\"\").trim()}function e(a){return a}var a=this,b=/function\\s.*?\\(([^)]*)\\)/,c=/\\/\\*.*\\*\\//;a.addEventListener(\"message\",function(b){a.postMessage({type:\"result\",result:a.process(b.data.load).apply(null,b.data.parameter)})},!1),a.process=function(a){var c=a.match(b)[1].split(\",\").map(d).filter(e);return c.push(a.substring(a.indexOf(\"{\")+1,a.lastIndexOf(\"}\"))),Function.apply(null,c)};',\n\t\t\tthreads      = { idle: [], busy: {} },\n\t\t\tqueue        = [],\n\t\t\tworker, i = 0;\n\n\t\tfunction processQueue() {\n\t\t\tvar task, thread;\n\n\t\t\tif(queue.length && (!supported || threads.idle.length)) {\n\t\t\t\ttask = queue.shift();\n\n\t\t\t\tif(supported) {\n\t\t\t\t\tthread = threads.idle.shift();\n\n\t\t\t\t\tthreads.busy[task.uuid] = thread;\n\n\t\t\t\t\tthread.addEventListener('message', task.onMessage);\n\t\t\t\t\tthread.addEventListener('error', task.onError);\n\t\t\t\t\tthread.postMessage({ load: task.load.toString(), parameter: task.parameter }, isInstanceOf(task.parameter, ArrayBuffer) ? [ task.parameter ] : null);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttask.deferred.resolve(task.load.apply(null, task.parameter));\n\t\t\t\t\t\t} catch(exception) {\n\t\t\t\t\t\t\ttask.deferred.reject();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprocessQueue();\n\t\t\t\t\t}, 4);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction disposeTask(task) {\n\t\t\tvar thread = threads.busy[task.uuid];\n\n\t\t\tdelete threads.busy[task.uuid];\n\n\t\t\tthread.removeEventListener('message', task.onMessage);\n\t\t\tthread.removeEventListener('error', task.onError);\n\t\t\tthreads.idle.push(thread);\n\t\t\tprocessQueue();\n\t\t}\n\n\t\tfunction Task(load, parameter) {\n\t\t\tvar self     = this,\n\t\t\t\tdeferred = Pledge.defer();\n\n\t\t\tself.uuid      = functionUniqueUuid();\n\t\t\tself.deferred  = deferred;\n\t\t\tself.load      = load;\n\t\t\tself.parameter = parameter || [];\n\n\t\t\tqueue.push(self);\n\t\t\tprocessQueue();\n\n\t\t\treturn deferred.pledge;\n\t\t}\n\n\n\t\tTask.prototype = {\n\t\t\t/* only for reference\n\t\t\tuuid:      null,\n\t\t\tdeferred:  null,\n\t\t\tload:      null,\n\t\t\tparameter: null,\n\t\t\t*/\n\t\t\tonMessage: function(event) {\n\t\t\t\tvar self = this;\n\n\t\t\t\tif(event.data.type === 'result') {\n\t\t\t\t\tself.deferred.resolve(event.data.result);\n\t\t\t\t\tdisposeTask(self);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: function() {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.deferred.reject();\n\t\t\t\tdisposeTask(self);\n\t\t\t}\n\t\t};\n\n\t\tif(supported) {\n\t\t\ttry {\n\t\t\t\tworker = NativeUrl.createObjectURL(new NativeBlob([ source ], { type: 'application/javascript' }));\n\n\t\t\t\tfor(; i < 4; i++) {\n\t\t\t\t\tthreads.idle[i] = new NativeWorker(worker);\n\t\t\t\t}\n\t\t\t} catch(exception) {\n\t\t\t\tsupported = false;\n\t\t\t}\n\t\t}\n\n\t\treturn base.extend(Task);\n\t}\n\n\tprovide([ '/demand/pledge', '/demand/validator/isInstanceOf', './base', './support/method', './function/unique/uuid' ],definition);\n}());"],"sourceRoot":"/source/"}